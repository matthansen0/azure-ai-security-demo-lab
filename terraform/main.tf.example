# Azure AI Security Demo Lab - Terraform Configuration
# CAIRA-Based Implementation (Proof of Concept)

# This file demonstrates how the infrastructure could be defined using
# CAIRA (Composable AI Reference Architecture) principles with Terraform.

terraform {
  required_version = ">= 1.5.0"
  
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~> 3.80"
    }
    azuread = {
      source  = "hashicorp/azuread"
      version = "~> 2.45"
    }
  }

  # Backend configuration for state management
  # Uncomment and configure for production use
  # backend "azurerm" {
  #   resource_group_name  = "terraform-state-rg"
  #   storage_account_name = "tfstate<unique-id>"
  #   container_name       = "tfstate"
  #   key                  = "azure-ai-security-demo.tfstate"
  # }
}

provider "azurerm" {
  features {
    key_vault {
      purge_soft_delete_on_destroy = false
      recover_soft_deleted_key_vaults = true
    }
    resource_group {
      prevent_deletion_if_contains_resources = false
    }
  }
}

provider "azuread" {}

# Data sources
data "azurerm_client_config" "current" {}

data "azuread_client_config" "current" {}

# Local variables
locals {
  project_name = var.project_name
  environment  = var.environment
  location     = var.location
  
  # Naming convention
  resource_group_name = "rg-${local.project_name}-${local.environment}"
  
  # Tags applied to all resources
  common_tags = merge(
    var.tags,
    {
      Project     = local.project_name
      Environment = local.environment
      ManagedBy   = "Terraform"
      Purpose     = "AI Security Demo Lab"
      Framework   = "CAIRA"
    }
  )
}

# Resource Group
resource "azurerm_resource_group" "main" {
  name     = local.resource_group_name
  location = local.location
  tags     = local.common_tags
}

# Log Analytics Workspace (required for Defender for AI)
resource "azurerm_log_analytics_workspace" "main" {
  name                = "log-${local.project_name}-${local.environment}"
  location            = azurerm_resource_group.main.location
  resource_group_name = azurerm_resource_group.main.name
  sku                 = "PerGB2018"
  retention_in_days   = var.log_retention_days
  tags                = local.common_tags
}

# Application Insights
resource "azurerm_application_insights" "main" {
  name                = "appi-${local.project_name}-${local.environment}"
  location            = azurerm_resource_group.main.location
  resource_group_name = azurerm_resource_group.main.name
  workspace_id        = azurerm_log_analytics_workspace.main.id
  application_type    = "web"
  tags                = local.common_tags
}

# Key Vault for secrets management
resource "azurerm_key_vault" "main" {
  name                        = "kv-${local.project_name}-${local.environment}"
  location                    = azurerm_resource_group.main.location
  resource_group_name         = azurerm_resource_group.main.name
  tenant_id                   = data.azurerm_client_config.current.tenant_id
  sku_name                    = "standard"
  soft_delete_retention_days  = 90
  purge_protection_enabled    = true
  enable_rbac_authorization   = true
  
  network_acls {
    bypass         = "AzureServices"
    default_action = var.key_vault_network_acls_default_action
  }
  
  tags = local.common_tags
}

# Storage Account
resource "azurerm_storage_account" "main" {
  name                     = "st${replace(local.project_name, "-", "")}${local.environment}"
  resource_group_name      = azurerm_resource_group.main.name
  location                 = azurerm_resource_group.main.location
  account_tier             = "Standard"
  account_replication_type = "LRS"
  
  # Security configurations
  min_tls_version                 = "TLS1_2"
  enable_https_traffic_only       = true
  allow_nested_items_to_be_public = false
  
  blob_properties {
    delete_retention_policy {
      days = 7
    }
    container_delete_retention_policy {
      days = 7
    }
  }
  
  tags = local.common_tags
}

# CAIRA AI Services Module (placeholder - would use actual CAIRA module)
# This demonstrates how CAIRA modules would be integrated

# module "ai_services" {
#   source = "github.com/microsoft/CAIRA//modules/ai_services"
#   
#   resource_group_name = azurerm_resource_group.main.name
#   location            = azurerm_resource_group.main.location
#   
#   # Azure OpenAI configuration
#   openai_name         = "openai-${local.project_name}-${local.environment}"
#   openai_sku          = "S0"
#   
#   # AI Search configuration
#   search_name         = "search-${local.project_name}-${local.environment}"
#   search_sku          = "standard"
#   
#   tags = local.common_tags
# }

# Cosmos DB for chat history
resource "azurerm_cosmosdb_account" "main" {
  name                = "cosmos-${local.project_name}-${local.environment}"
  location            = azurerm_resource_group.main.location
  resource_group_name = azurerm_resource_group.main.name
  offer_type          = "Standard"
  kind                = "GlobalDocumentDB"
  
  consistency_policy {
    consistency_level = "Session"
  }
  
  geo_location {
    location          = azurerm_resource_group.main.location
    failover_priority = 0
  }
  
  # Security features
  local_authentication_disabled = false
  
  tags = local.common_tags
}

# App Service Plan
resource "azurerm_service_plan" "main" {
  name                = "asp-${local.project_name}-${local.environment}"
  location            = azurerm_resource_group.main.location
  resource_group_name = azurerm_resource_group.main.name
  os_type             = "Linux"
  sku_name            = var.app_service_sku
  tags                = local.common_tags
}

# App Service
resource "azurerm_linux_web_app" "main" {
  name                = "app-${local.project_name}-${local.environment}"
  location            = azurerm_resource_group.main.location
  resource_group_name = azurerm_resource_group.main.name
  service_plan_id     = azurerm_service_plan.main.id
  https_only          = true
  
  site_config {
    always_on        = true
    ftps_state       = "Disabled"
    http2_enabled    = true
    minimum_tls_version = "1.2"
    
    application_stack {
      python_version = "3.11"
    }
  }
  
  identity {
    type = "SystemAssigned"
  }
  
  app_settings = {
    "APPLICATIONINSIGHTS_CONNECTION_STRING" = azurerm_application_insights.main.connection_string
    "WEBSITES_PORT" = "50505"
  }
  
  tags = local.common_tags
}

# Security Module - Microsoft Defender Plans
# This would be a custom module extending CAIRA
# module "defender_plans" {
#   source = "./modules/defender-plans"
#   
#   subscription_id          = data.azurerm_client_config.current.subscription_id
#   resource_group_name      = azurerm_resource_group.main.name
#   log_analytics_workspace_id = azurerm_log_analytics_workspace.main.id
#   
#   # Enable specific Defender plans
#   enable_defender_for_ai           = var.enable_defender_for_ai
#   enable_defender_for_storage      = var.enable_defender_for_storage
#   enable_defender_for_app_services = var.enable_defender_for_app_services
#   enable_defender_for_cosmos_db    = var.enable_defender_for_cosmos_db
#   
#   # Storage account IDs for Defender for Storage
#   storage_accounts = [azurerm_storage_account.main.id]
# }

# Networking and Security Module - Front Door + WAF
# module "front_door_waf" {
#   source = "./modules/networking-security"
#   
#   resource_group_name = azurerm_resource_group.main.name
#   location            = azurerm_resource_group.main.location
#   
#   # Front Door configuration
#   front_door_name     = "fd-${local.project_name}-${local.environment}"
#   endpoint_name       = "endpoint-${local.project_name}"
#   
#   # Backend configuration (App Service)
#   backend_hostname    = azurerm_linux_web_app.main.default_hostname
#   
#   # WAF configuration
#   waf_policy_name     = "waf${replace(local.project_name, "-", "")}${local.environment}"
#   waf_mode            = "Prevention"
#   
#   # Managed rule sets
#   enable_default_rule_set = true
#   enable_bot_manager      = true
#   
#   tags = local.common_tags
# }

# Outputs
output "resource_group_name" {
  value       = azurerm_resource_group.main.name
  description = "The name of the resource group"
}

output "log_analytics_workspace_id" {
  value       = azurerm_log_analytics_workspace.main.id
  description = "The ID of the Log Analytics workspace"
}

output "app_service_url" {
  value       = "https://${azurerm_linux_web_app.main.default_hostname}"
  description = "The URL of the App Service"
}

output "application_insights_connection_string" {
  value       = azurerm_application_insights.main.connection_string
  sensitive   = true
  description = "Application Insights connection string"
}
